<?php
 class Action extends Base { public function __construct() { parent::__construct(); } public final function getActionTime() { global $TMAC_START_TIME; return microtime(true) - $TMAC_START_TIME; } public final function __destruct() { global $TmacConfig; if ($TmacConfig['Common']['debug']) { $debug = Debug::getInstance(); $debug->setIncludeFile(); echo $debug->getDebug(); } } }
 class Base { protected $tpl; protected $now; protected $isPost = false; protected $tVar = array(); public function __construct() { $this->isPost = (isset( $_SERVER[ 'REQUEST_METHOD' ] ) && $_SERVER[ 'REQUEST_METHOD' ] === 'POST'); $this->now = time(); } public final function connect( $database = null ) { $database || $database = $GLOBALS[ 'TmacConfig' ][ 'Common' ][ 'Database' ]; return DatabaseDriver::getInstance( $database ); } public function assign( $name, $value = '' ) { if ( is_array( $name ) ) { $this->tVar = array_merge( $this->tVar, $name ); } elseif ( is_object( $name ) ) { foreach ( $name as $key => $val ) $this->tVar[ $key ] = $val; } else { $this->tVar[ $name ] = $value; } } public final function getValue( $name ) { if ( isset( $this->tVar[ $name ] ) ) return $this->tVar[ $name ]; else return false; } public final function V( $tpl = null ) { $array = array( 'BASE' => BASE . 'common/', 'BASE_V' => BASE_V . $GLOBALS[ 'TmacConfig' ][ 'Template' ][ 'template_dir' ] . '/', 'BASE_COMMON_V' => BASE_V . 'common/' ); $this->assign( $array ); $tpl = $GLOBALS[ 'TmacConfig' ][ 'Template' ][ 'template_dir' ] . DIRECTORY_SEPARATOR . $tpl; Tmac::view( $tpl, $this->tVar ); } public final function VIEW( $view ) { $array = array( 'BASE' => BASE . 'common/', 'BASE_V' => BASE_V . $GLOBALS[ 'TmacConfig' ][ 'Template' ][ 'template_dir' ] . '/', 'BASE_COMMON_V' => BASE_V . 'common/' ); $this->assign( $array ); Tmac::display( $view, $this->tVar ); } public final function M( $model, $app_name = APP_NAME, $ext = '.class.php' ) { return Tmac::model( $model, $app_name, $ext ); } public final function D( $key, $value ) { global $TmacConfig; if ( $TmacConfig[ 'Common' ][ 'debug' ] ) { $debug = Debug::getInstance(); $debug->setVar( $key, $value ); } } public final function P( $plugin, $app_name = null, $param = array(), $ext = '.class.php' ) { return Tmac::plugin( $plugin, $app_name, $param, $ext ); } public final function H( $data ) { return is_array( $data ) ? array_map( array( __CLASS__, 'H' ), $data ) : htmlspecialchars( $data, ENT_QUOTES ); } public final function HD( $data ) { return is_array( $data ) ? array_map( array( __CLASS__, 'HD' ), $data ) : htmlspecialchars_decode( $data, ENT_QUOTES ); } public final function alert( $url = 'BACK', $errStr = 'NOERR', $parent = false ) { $first = '<script type="text/javascript">'; $center = ''; $last = '</script>'; ($errStr == 'NOERR') ? ($center = '') : ($center = 'alert("' . $errStr . '");'); ($url == 'BACK') ? ($center .= 'window.history.go(-1);') : ($center .= ( $parent == true ? 'parent.' : '') . 'location.href="' . $url . '";'); echo $first, $center, $last; exit(); } public final function redirect( $msg, $url = 'javascript:history.go(-1);', $time = 3, $success = false ) { $array[ 'msg' ] = $msg; $array[ 'url' ] = $url; $array[ 'time' ] = $time; $this->assign( $array ); if ( $success ) { $this->V( 'redirect_success' ); } else { $this->V( 'redirect' ); } exit(); } public final function headerRedirect( $url ) { header( "Location: " . $url ); exit(); } public final function getParam( $key, $default_value = NULL ) { if ( isset( $_GET[ $key ] ) ) { return $_GET[ $key ]; } elseif ( isset( $_POST[ $key ] ) ) { return $_POST[ $key ]; } else { if ( $default_value >= 0 ) { return $default_value; } else { return ''; } } } }
 class Controller { private $param; private $url; public function __construct() { $this->parsePath(); $this->getControllerFile(); $this->getControllerClass(); } private function parsePath() { global $TmacConfig; if ($TmacConfig['Common']['url_case_insensitive']) { if (!empty($_GET['M']) && empty($_GET['m'])) $_GET['m'] = strtolower($_GET['M']); } if (empty($_GET['m'])) { $this->param['TMAC_CONTROLLER_FILE'] = $this->param['TMAC_CONTROLLER'] = $this->param['TMAC_ACTION'] = 'index'; return true; } $queryString = $_GET['m']; unset($_GET['m']); $action = ''; if (($urlSeparatorPosition = strrpos($queryString, $TmacConfig['Common']['urlseparator'])) > 0) { $controller = substr($queryString, 0, $urlSeparatorPosition); $action = substr($queryString, $urlSeparatorPosition + 1); } else { $controller = $queryString; } if ($this->isLetter($controller) === false) { $message = "错误的Controller请求"; $message .= $GLOBALS['TmacConfig']['Common']['debug'] ? ": [{$controller}]" : ""; throw new TmacException($message); } if (empty($action)) $action = 'index'; $this->param['TMAC_CONTROLLER_FILE'] = $controller; $this->param['TMAC_CONTROLLER'] = basename($controller); $this->param['TMAC_ACTION'] = $action; return true; } private function getControllerFile() { $controllerFile = APPLICATION_ROOT . 'Controller' . DIRECTORY_SEPARATOR . $this->param['TMAC_CONTROLLER_FILE'] . '.php'; if (is_file($controllerFile)) { require($controllerFile); } else { $message = "错误的请求，找不到Controller文件"; $message .= $GLOBALS['TmacConfig']['Common']['debug'] ? ":[$controllerFile]" : ""; throw new TmacException($message); } } private function getControllerClass() { $controllerClass = $this->param['TMAC_CONTROLLER'] . 'Action'; if (class_exists($controllerClass, false)) { $methods = get_class_methods($controllerClass); if (!in_array($this->param['TMAC_ACTION'], $methods)) { $message = "错误的请求，找不到Action"; $message .= $GLOBALS['TmacConfig']['Common']['debug'] ? ":[{$this->param['TMAC_ACTION']}]" : ""; throw new TmacException($message); } new HttpRequest($this->param); $action = new $controllerClass(); in_array('_init', $methods) && $action->_init(); $action->{$this->param['TMAC_ACTION']}(); } else { $message = "错误的请求，找不到Controller类"; $message .= $GLOBALS['TmacConfig']['Common']['debug'] ? ":[$controllerClass]" : ""; throw new TmacException($message); } } private function isLetter($char) { $ascii = ord($char{0}); return ($ascii >= 65 && $ascii <= 90) || ($ascii >= 97 && $ascii <= 122); } }
 class Debug { protected static $instance = null; protected $info = ''; protected $debug = '<style type="text/css">#TmacDebug {padding:0;margin:0;font-family:"微软雅黑", "宋体", Verdana, Geneva, sans-serif;font-size:14px;}.debug_box {width:95%;margin:20px auto;border:#99C4D5 solid 1px}.debug_box .debug_box_top {background:#C5E3E9;font-size:14px;padding:10px;color:#F30}.debug_i {color:#F60}.debug_box .debug_body {background:#ECF7F9;padding:10px;color:#0678A9;border-top:#99C4D5 solid 1px}</style><hr /><div id="TmacDebug"><div class="debug_box"><div class="debug_box_top">以下为Debug信息</div>%s</div></div>'; protected $div = '<div class="debug_body">[<span class="debug_i">%s</span>] : <br />%s</div>'; public static function getInstance() { if (is_null(self::$instance)) { self::$instance = new Debug(); } return self::$instance; } public function setVar($key, $value) { $this->info .= sprintf($this->div, $key, '<pre>' . var_export($value, true) . '</pre>'); } public function setSQL($sql, $success = true, $error = null) { $this->info .= sprintf($this->div, '执行SQL语句(' . ($success ? '成功' : ('失败' . $error)) . ')', '<pre>' . $sql . '</pre>'); } public function setIncludeFile() { $included_files = get_included_files (); $this->info .= '加载文件：' . count($included_files) . '<br>'; foreach ($included_files as $k => $filename) { $this->info .= '[' . $k . ']=>' . $filename . '</br>'; } } public function getDebug() { return sprintf($this->debug, null, $this->info); } public function debugAjax($info) { $file_info = var_export($info, true); $ok = file_put_contents(WEB_ROOT . "/file_info.txt", $file_info); if ($ok) exit('true'); exit('false'); } }
 class HttpRequest { public function __construct($request) { global $TmacConfig; if($TmacConfig['Common']['autofilter']) { $this->filter($request); if (!get_magic_quotes_gpc()) { $this->filter($_GET); $this->filter($_POST); $this->filter($_COOKIE); $this->filter($_FILES); } } $param = $this->cleanArray($request); $_GET = array_merge($_GET, $param); unset($param); unset($request); unset($_ENV); unset($HTTP_ENV_VARS); unset($_REQUEST); unset($HTTP_POST_VARS); unset($HTTP_GET_VARS); unset($HTTP_POST_FILES); unset($HTTP_COOKIE_VARS); } protected function filter(&$array) { if (is_array($array)) { foreach ($array as $key => $value) { is_array($value) ? $this->filter($value) : $array[$key] = addslashes($value); } } } protected function cleanArray($array) { foreach ($array as $key => $value) { if (empty($key) && empty($value)) { unset($array[$key]); } } return $array; } } 
 class HttpResponse { public static function setCookie($key, $value, $expire = 0) { global $TmacConfig; if ($TmacConfig['Common']['cookiecrypt']) { $key = $TmacConfig['Common']['cookiepre'] . md5($TmacConfig['Common']['cookiepre'] . $key); $value = base64_encode(serialize($value)); } else { $key = $TmacConfig['Common']['cookiepre'] . $key; } return setcookie($key, $value, $expire, ROOT); } public static function getCookie($key) { global $TmacConfig; if ($TmacConfig['Common']['cookiecrypt']) { $key = $TmacConfig['Common']['cookiepre'] . md5($TmacConfig['Common']['cookiepre'] . $key); return isset($_COOKIE[$key]) ? unserialize(base64_decode($_COOKIE[$key])) : null; } else { $key = $TmacConfig['Common']['cookiepre'] . $key; return isset($_COOKIE[$key]) ? $_COOKIE[$key] : null; } } public static function delCookie($key) { global $TmacConfig; if ($TmacConfig['Common']['cookiecrypt']) { $key = $TmacConfig['Common']['cookiepre'] . md5($TmacConfig['Common']['cookiepre'] . $key); } else { $key = $TmacConfig['Common']['cookiepre'] . $key; } return setcookie($key, '', -1, ROOT); } public static function addHeader($key, $value) { if (!headers_sent()) { $key = ucfirst(strtolower($key)); header($key . ': ' . $value); } else { throw new TmacException('Header already sent.'); } } }
 class Model extends Base { public function __construct() { parent::__construct(); } public final function getQueryNum() { return $this->db->getQueryNum(); } }
 class SessionDb { protected $lifeTime = ''; protected $sessionTable = ''; protected $hander; public function open($savePath, $sessName) { $this->lifeTime = get_cfg_var("session.gc_maxlifetime"); $this->sessionTable = $GLOBALS['TmacConfig']['Session']['table']; $name = $GLOBALS['TmacConfig']['Common']['Database']; $hander = mysql_connect($GLOBALS['db'][$name]['hostname'], $GLOBALS['db'][$name]['username'], $GLOBALS['db'][$name]['password']); $dbSel = mysql_select_db($GLOBALS['db'][$name]['database'], $hander); if (!$hander || !$dbSel) return false; $this->hander = $hander; return true; } public function close() { $this->gc(ini_get('session.gc_maxlifetime')); return mysql_close($this->hander); } public function read($sessID) { $res = mysql_query("SELECT session_data AS data FROM " . $this->sessionTable . " WHERE session_id = '$sessID'   AND session_expire >" . time(), $this->hander); if ($res) { $row = mysql_fetch_assoc($res); return $row['data']; } return ""; } public function write($sessID, $sessData) { $expire = time() + $this->lifeTime; mysql_query("REPLACE INTO  " . $this->sessionTable . " (  session_id, session_expire, session_data)  VALUES( '$sessID', '$expire',  '$sessData')", $this->hander); if (mysql_affected_rows($this->hander)) return true; return false; } public function destroy($sessID) { mysql_query("DELETE FROM " . $this->sessionTable . " WHERE session_id = '$sessID'", $this->hander); if (mysql_affected_rows($this->hander)) return true; return false; } public function gc($sessMaxLifeTime) { mysql_query("DELETE FROM " . $this->sessionTable . " WHERE session_expire < " . time(), $this->hander); return mysql_affected_rows($this->hander); } public function execute() { session_set_save_handler(array(&$this, "open"), array(&$this, "close"), array(&$this, "read"), array(&$this, "write"), array(&$this, "destroy"), array(&$this, "gc")); } }
 class Template { const DIR_SEP = DIRECTORY_SEPARATOR; protected static $_instance; protected $_options = array(); protected $templates = array(); private $time; public static function getInstance () { if ( !self::$_instance instanceof self ) self::$_instance = new self(); return self::$_instance; } private function __construct () { $this->_options = array( 'template_dir' => APPLICATION_ROOT . 'View', 'cache_dir' => VAR_ROOT . 'Cache' . self::DIR_SEP . 'template' . self::DIR_SEP, 'auto_update' => true, 'cache_lifetime' => 0, 'suffix' => '.html', 'cache_open' => true, 'value' => array() ); $this->setTime ( time() ); } public function getTime () { return $this->time; } public function setTime ( $time ) { $this->time = $time; } public function setOptions ( array $options ) { foreach ( $options as $name => $value ) $this->set ( $name, $value ); } public function set ( $name, $value ) { switch ( $name ) { case 'template_dir': $value = $this->_trimpath ( $value ); if ( !file_exists ( $value ) ) throw new TmacException ( "未找到指定的模板目录 \"$value\"" ); $this->_options[ 'template_dir' ] = $value; break; case 'cache_dir': $value = $this->_trimpath ( $value ); if ( !file_exists ( $value ) ) throw new TmacException ( "未找到指定的缓存目录 \"$value\"" ); $this->_options[ 'cache_dir' ] = $value; break; case 'auto_update': $this->_options[ 'auto_update' ] = ( boolean ) $value; break; case 'cache_lifetime': $this->_options[ 'cache_lifetime' ] = ( float ) $value; break; case 'suffix': $this->_options[ 'suffix' ] = $value; break; case 'cache_open': $this->_options[ 'cache_open' ] = $value; break; case 'value': $this->_options[ 'value' ] = $value; break; default: throw new TmacException ( "未知的模板配置选项 \"$name\"" ); } } public function __set ( $name, $value ) { $this->set ( $name, $value ); } public function isCacheOpened () { return $this->_options[ 'cache_open' ]; } public function getfile ( $file ) { $file = $file . $this->_options[ 'suffix' ]; $cachefile = $this->_getCacheFile ( $file ); if ( $this->isCacheOpened () ) { if ( !file_exists ( $cachefile ) ) $this->cache ( $file ); } else { $this->cache ( $file ); } return $cachefile; } public function show ( $file ) { $file = $this->getfile ( $file ); if ( is_file ( $file ) ) { extract ( $this->_options[ 'value' ], EXTR_OVERWRITE ); include($file); } else { throw new TmacException ( '找不到模板文件:' . $file ); } } public function check ( $file, $fname, $expireTime ) { if ( $this->_options[ 'auto_update' ] && filemtime ( $fname ) > $expireTime ) { $this->cache ( $file ); return true; } if ( $this->_options[ 'cache_lifetime' ] != 0 && ($this->getTime () - $expireTime >= $this->_options[ 'cache_lifetime' ] * 60) ) { $this->cache ( $file ); return true; } return false; } public function cache ( $file ) { $tplfile = $this->_getTplFile ( $file ); if ( !is_readable ( $tplfile ) ) { throw new TmacException ( "模板文件 \"$tplfile\" 未找到或者无法打开" ); } $template = file_get_contents ( $tplfile ); $this->templates = array(); for ( $i = 1; $i <= 3; $i++ ) { if ( $this->strexists ( $template, '{template_common' ) ) { $template = preg_replace_callback ( "/[\n\r\t]*(\<\!\-\-)?\{template_common\s+([a-z0-9_:\/]+)\}(\-\-\>)?[\n\r\t]*/is", function($matches){return $this->loadTemplateCommon($matches[2]);}, $template ); } if ( $this->strexists ( $template, '{template' ) ) { $template = preg_replace_callback ( "/[\n\r\t]*(\<\!\-\-)?\{template\s+([a-z0-9_:\/]+)\}(\-\-\>)?[\n\r\t]*/is", function($matches){return $this->loadtemplate($matches[2]);}, $template ); } } $template = preg_replace ( "/\<\!\-\-\{(.+?)\}\-\-\>/s", "{\\1}", $template ); $template = str_replace ( "{LF}", "<?php echo \"\\n\";?>", $template ); $template = str_replace ( "^{", "&#123", $template ); $template = str_replace ( "}^", "&#125", $template ); $varRegexp = "((\\\$[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff\-\>]*)" . "(\[[\$a-zA-Z0-9_\-\.\"\'\[\]\$\x7f-\xff\-\>]+)*)"; $template = preg_replace ( "/\{(\\\$[a-zA-Z0-9_\[\]\'\"\$\.\x7f-\xff\-\>]+)\}/s", "<?php echo \\1;?>", $template ); $template = preg_replace_callback ( "/$varRegexp/s", function($matches){return $this->addquote('<?php echo '.$matches[1].';?>');}, $template ); $template = preg_replace_callback ( "/\<\?php echo \<\?php echo $varRegexp;\?\>;\?\>/s", function($matches){return $this->addquote('<?php echo '.$matches[1].';?>');}, $template ); $template = preg_replace ( "/[\n\r\t]*\{tpl\s+(.+?)\}[\n\r\t]*/is", "<?php self::show('{$GLOBALS[ 'TmacConfig' ][ 'Template' ][ 'template_dir' ]}/\\1'); ?>", $template ); $template = preg_replace_callback ( "/[\n\r\t]*\{eval\s+(.+?)\}[\n\r\t]*/is", function($matches){return $this->stripvtags('<?php '.$matches[1].' ?>','');}, $template ); $template = preg_replace_callback ( "/[\n\r\t]*\\\${(.+?)\}[\n\r\t]*/is", function($matches){return $this->stripvtags('<?php '.$matches[1].' ?>','');}, $template ); $template = preg_replace_callback ( "/[\n\r\t]*\{echo\s+(.+?)\}[\n\r\t]*/is", function($matches){return $this->stripvtags('<?php echo '.$matches[1].'; ?>','');}, $template ); $template = preg_replace_callback ( "/([\n\r\t]*)\{elseif\s+(.+?)\}([\n\r\t]*)/is", function($matches){return $this->stripvtags($matches[1].'<?php } elseif('.$matches[2].') { ?>'.$matches[3].'','');}, $template ); $template = preg_replace ( "/([\n\r\t]*)\{else\}([\n\r\t]*)/is", "\\1<?php } else { ?>\\2", $template ); $template = preg_replace_callback ( "/\{if\s+(.+?)\}/is", function($matches){return $this->stripvtags('<?php if('.$matches[1].') { ?>','');}, $template ); $template = preg_replace_callback ( "/\{else\}/is", function(){return $this->stripvtags('<?php } else { ?>','');}, $template ); $template = preg_replace_callback ( "/\{elseif\s+(.+?)\}/is", function($matches){return $this->stripvtags('<?php } elseif ('.$matches[1].') { ?>','');}, $template ); $template = preg_replace_callback ( "/\{\/if\}/is", function(){return $this->stripvtags('<?php } ?>','');}, $template ); $template = preg_replace_callback ( "/\{loop\s+\<\?php echo (\S+);\?\>\s+\<\?php echo (\S+);\?\>\}/is", function($matches){return $this->stripvtags('<?php if(is_array('.$matches[1].')) foreach('.$matches[1].' AS '.$matches[2].') { ?>','');}, $template ); $template = preg_replace_callback ( "/\{loop\s+\<\?php echo (\S+);\?\>\s+\<\?php echo (\S+);\?\>\s+\<\?php echo (\S+);\?\>\}/is", function($matches){return $this->stripvtags('<?php if(is_array('.$matches[1].')) foreach('.$matches[1].' AS '.$matches[2].' => '.$matches[3].') { ?>','');}, $template ); $template = preg_replace_callback ( "/\{\/loop\}/is", function(){return $this->stripvtags('<?php } ?>','');}, $template ); $template = preg_replace ( "/\{([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)\}/s", "<?php echo \\1; ?>", $template ); $template = preg_replace ( "/ \?\>[\n\r]*\<\?php /s", " ", $template ); $template = preg_replace_callback ( "/\"(http)?[\w\.\/:]+\?[^\"]+?&[^\"]+?\"/", function($matches){return $this->transamp($matches[0]);}, $template ); $template = preg_replace_callback ( "/\<script[^\>]*?src=\"(.+?)\".*?\>\s*\<\/script\>/is", function($matches){return $this->stripscriptamp($matches[1]);}, $template ); $template = preg_replace_callback ( "/[\n\r\t]*\{block\s+([a-zA-Z0-9_]+)\}(.+?)\{\/block\}/is", function($matches){return $this->stripblock($matches[1], $matches[2]);}, $template ); $headeradd = "\n0\n"; $headeradd .= "|| self::check('$file', '$tplfile', " . $this->getTime () . ")\n"; if ( !empty ( $this->templates ) ) { foreach ( $this->templates as $fname ) { $headeradd .= "|| self::check('$file', '$fname', " . $this->getTime () . ")\n"; } } $headeradd .= ';'; $template = "<?php if (!class_exists('template', false)) die('Access Denied');{$headeradd}?>\r\n$template"; $cachefile = $this->_getCacheFile ( $file ); $makepath = $this->_makepath ( $cachefile ); if ( $makepath !== true ) throw new TmacException ( "无法创建缓存目录 \"$makepath\"" ); file_put_contents ( $cachefile, $template ); } protected function _trimpath ( $path ) { return str_replace ( array('/', '\\', '//', '\\\\'), self::DIR_SEP, $path ); } protected function _getTplFile ( $file ) { return $this->_trimpath ( $this->_options[ 'template_dir' ] . self::DIR_SEP . $file ); } protected function _getCacheFile ( $file ) { $file = preg_replace ( '/\.[a-z0-9\-_]+$/i', '.cache.php', $file ); return $this->_trimpath ( $this->_options[ 'cache_dir' ] . self::DIR_SEP . $file ); } protected function _makepath ( $path ) { $dirs = dirname ( $this->_trimpath ( $path ) ); if ( !file_exists ( $dirs ) && !@mkdir ( $dirs, 0777 ) ) { return $dirs; } return true; } public function transamp ( $template ) { $template = str_replace ( '&', '&amp;', $template ); $template = str_replace ( '&amp;amp;', '&amp;', $template ); $template = str_replace ( '\"', '"', $template ); return $template; } public function stripvtags ( $expr, $statement ) { $expr = str_replace ( "\\\"", "\"", preg_replace ( "/\<\?php echo (\\\$.+?);\?\>/s", "\\1", $expr ) ); $statement = str_replace ( "\\\"", "\"", $statement ); return $expr . $statement; } public function addquote ( $var ) { return str_replace ( "\\\"", "\"", preg_replace ( "/\[([a-zA-Z0-9_\-\.\x7f-\xff]+)\]/s", "['\\1']", $var ) ); } public function stripscriptamp ( $s ) { $s = str_replace ( '&amp;', '&', $s ); return "<script src=\"$s\" type=\"text/javascript\"></script>"; } public function stripblock ( $var, $s ) { $s = str_replace ( '\\"', '"', $s ); $s = preg_replace ( "/<\?php echo \\\$(.+?);\?>/", "{\$\\1}", $s ); preg_match_all ( "/<\?php echo (.+?);\?>/e", $s, $constary ); $constadd = ''; $constary[ 1 ] = array_unique ( $constary[ 1 ] ); foreach ( $constary[ 1 ] as $const ) { $constadd .= '$__' . $const . ' = ' . $const . ';'; } $s = preg_replace ( "/<\?php echo (.+?);\?>/", "{\$__\\1}", $s ); $s = str_replace ( '?>', "\n\$$var .= <<<EOF\n", $s ); $s = str_replace ( '<?', "\nEOF;\n", $s ); return "<?php \n$constadd\$$var = <<<EOF\n" . $s . "\nEOF;\n?>"; } public function strexists ( $string, $find ) { return !(strpos ( $string, $find ) === FALSE); } public function loadtemplate ( $file ) { $tplfile = $this->_options[ 'template_dir' ] . DIRECTORY_SEPARATOR . $GLOBALS[ 'TmacConfig' ][ 'Template' ][ 'template_dir' ] . DIRECTORY_SEPARATOR . $file . $this->_options[ 'suffix' ]; if ( $content = file_get_contents ( $tplfile ) ) { $this->templates[] = $tplfile; return $content; } else { return '<!-- ' . $file . ' -->'; } } public function loadTemplateCommon ( $file ) { $tplfile = $this->_options[ 'template_dir' ] . DIRECTORY_SEPARATOR . 'common' . DIRECTORY_SEPARATOR . $file . $this->_options[ 'suffix' ]; if ( $content = file_get_contents ( $tplfile ) ) { $this->templates[] = $tplfile; return $content; } else { return '<!-- ' . $file . ' -->'; } } }
 class Tmac { protected static $model = array(); protected static $plugin = array(); protected static $config = array(); public function __construct () { global $TmacConfig; header ( "Content-type: text/html;charset={$TmacConfig[ 'Common' ][ 'charset' ]}" ); @date_default_timezone_set ( $TmacConfig[ 'Common' ][ 'timezone' ] ); $htaccess = WEB_ROOT . '.htaccess'; if ( $TmacConfig[ 'Common' ][ 'urlrewrite' ] ) { if ( is_file ( $htaccess ) ) { if ( filesize ( $htaccess ) > 132 ) { unlink ( $htaccess ); file_put_contents ( $htaccess, "RewriteEngine on\r\nRewriteBase " . ROOT . "\r\nRewriteCond %{SCRIPT_FILENAME} !-f\r\nRewriteCond %{SCRIPT_FILENAME} !-d\r\nRewriteRule ^.*$ index.php", LOCK_EX ); } } } ini_set ( "magic_quotes_runtime", 0 ); if ( $TmacConfig[ 'Common' ][ 'gzip' ] ) { function_exists ( 'ob_gzhandler' ) ? ob_start ( 'ob_gzhandler' ) : ob_start (); } else { ob_start (); } $TmacConfig[ 'Common' ][ 'errorreport' ] ? error_reporting ( E_ALL ) : error_reporting ( 0 ); set_exception_handler ( array($this, 'exception') ); if ( $GLOBALS[ 'TmacConfig' ][ 'Session' ][ 'start' ] ) { self::session (); } new Controller(); } public final static function model ( $model, $app_name = APP_NAME, $ext = '.class.php' ) { $modelName = $model . '_' . $app_name; if ( !array_key_exists ( $modelName, self::$model ) ) { $file = APPS_PATH . $app_name . DIRECTORY_SEPARATOR . APPLICATION . DIRECTORY_SEPARATOR . 'Model' . DIRECTORY_SEPARATOR . 'service' . DIRECTORY_SEPARATOR . $model . $ext; if ( is_file ( $file ) ) { include($file); if ( strpos ( $model, '/' ) === false ) { $className = $model . '_' . $app_name; } else { $className = str_replace ( '/', '_', $model ) . '_' . $app_name; } $className = 'service_' . $className; $m = new $className(); in_array ( '_init', get_class_methods ( $className ) ) && $m->_init (); self::$model[ $modelName ] = $m; return $m; } else { throw new TmacException ( '找不到Model文件:' . $file ); } } else { in_array ( '_init', get_class_methods ( self::$model[ $modelName ] ) ) && self::$model[ $modelName ]->_init (); return self::$model[ $modelName ]; } } public final static function plugin ( $plugin, $app_name = null, $param = array(), $ext = '.class.php' ) { if ( !array_key_exists ( $plugin, self::$plugin ) ) { if ( empty ( $app_name ) ) { $file = TMAC_PATH . 'Plugin' . DIRECTORY_SEPARATOR . $plugin . $ext; } else { $file = APPS_PATH . $app_name . DIRECTORY_SEPARATOR . APPLICATION . DIRECTORY_SEPARATOR . 'Plugin' . DIRECTORY_SEPARATOR . $plugin . $ext; } if ( !is_file ( $file ) ) { throw new TmacException ( '找不到Plugin文件:' . $file ); } include($file); $pluginName = basename ( $plugin ); $p = empty ( $param ) ? new $pluginName() : new $pluginName ( $param ); self::$plugin[ $plugin ] = $p; return $p; } else { return self::$plugin[ $plugin ]; } } public final static function view ( $view = null, $tVar = null ) { global $TmacConfig; $options = array( 'template_dir' => APPLICATION_ROOT . $TmacConfig[ 'Template' ][ 'template' ], 'cache_dir' => VAR_ROOT . $TmacConfig[ 'Template' ][ 'cache_dir' ], 'auto_update' => $TmacConfig[ 'Template' ][ 'auto_update' ], 'cache_lifetime' => $TmacConfig[ 'Template' ][ 'cache_lifetime' ], 'suffix' => $TmacConfig[ 'Template' ][ 'suffix' ], 'cache_open' => $TmacConfig[ 'Template' ][ 'cache_open' ], 'value' => $tVar ); $tmac_template_update_cache = Input::get ( 'tmac_template_update_cache', 0 )->int (); if ( $tmac_template_update_cache ) { $options[ 'auto_update' ] = true; } $tpl = Template::getInstance (); $tpl->setOptions ( $options ); if ( $view == $TmacConfig[ 'Template' ][ 'template_dir' ] . DIRECTORY_SEPARATOR ) { $view_new = strtolower ( $_GET[ 'TMAC_CONTROLLER_FILE' ] ); $view = $view . $view_new; } $tpl->show ( $view ); } public final static function display ( $view, $tVar = null ) { $file = APPLICATION_ROOT . $GLOBALS[ 'TmacConfig' ][ 'Template' ][ 'template' ] . DIRECTORY_SEPARATOR . $GLOBALS[ 'TmacConfig' ][ 'Template' ][ 'template_dir' ] . DIRECTORY_SEPARATOR . $view . $GLOBALS[ 'TmacConfig' ][ 'Template' ][ 'suffix' ]; if ( !empty ( $tVar ) ) { extract ( $tVar, EXTR_OVERWRITE ); } include $file; } public final static function loadView ( $view ) { $file = APPLICATION_ROOT . $GLOBALS[ 'TmacConfig' ][ 'Template' ][ 'template' ] . DIRECTORY_SEPARATOR . $GLOBALS[ 'TmacConfig' ][ 'Template' ][ 'template_dir' ] . DIRECTORY_SEPARATOR . $view . $GLOBALS[ 'TmacConfig' ][ 'Template' ][ 'suffix' ]; return $file; } public final static function findFile ( $file, $app_name = APP_NAME, $ext = '.class.php' ) { $filePath = APPS_PATH . $app_name . DIRECTORY_SEPARATOR . APPLICATION . DIRECTORY_SEPARATOR . 'Plugin' . DIRECTORY_SEPARATOR . $file . $ext; if ( is_file ( $filePath ) ) { return $filePath; } else { throw new TmacException ( '找不到' . APP_NAME . '核心包中的Plugin文件:' . $filePath ); } } public final static function findModel ( $file, $app_name = APP_NAME, $ext = '.class.php' ) { $filePath = APPS_PATH . $app_name . DIRECTORY_SEPARATOR . APPLICATION . DIRECTORY_SEPARATOR . 'Model' . DIRECTORY_SEPARATOR . $file . $ext; if ( is_file ( $filePath ) ) { return $filePath; } else { throw new TmacException ( '在' . APP_NAME . '的模型Model中没有找到文件:' . $filePath ); } } public final static function config ( $model, $app_name = APP_NAME, $ext = '.php' ) { $group_array = explode ( '.', $model ); $group = $group_array[ 0 ]; array_shift ( $group_array ); if ( !isset ( self::$config[ $group ] ) ) { $file = APPS_PATH . $app_name . DIRECTORY_SEPARATOR . APPLICATION . DIRECTORY_SEPARATOR . 'Config' . DIRECTORY_SEPARATOR . $group . $ext; if ( is_file ( $file ) ) { include($file); self::$config[ $group ] = $config; unset ( $config ); } else { throw new TmacException ( '找不到Config文件:' . $file ); } } if ( count ( $group_array ) == 1 ) { $group_key = $group_array[ 0 ]; $group_value = isset ( self::$config[ $group ][ $group_key ] ) ? self::$config[ $group ][ $group_key ] : ''; } else { $group_value = self::$config[ $group ]; foreach ( $group_array AS $value ) { if ( isset ( $group_value[ $value ] ) ) { $group_value = $group_value[ $value ]; } } } if ( !isset ( $group_value ) ) { throw new TmacException ( 'Config文件:' . $group . '里面的配置文件值不能为空!' ); } return $group_value; } public final static function session () { ini_set ( 'session.auto_start', 0 ); if ( !empty ( $GLOBALS[ 'TmacConfig' ][ 'Session' ][ 'name' ] ) ) session_name ( $GLOBALS[ 'TmacConfig' ][ 'Session' ][ 'name' ] ); if ( !empty ( $GLOBALS[ 'TmacConfig' ][ 'Session' ][ 'path' ] ) ) session_save_path ( $GLOBALS[ 'TmacConfig' ][ 'Session' ][ 'path' ] ); if ( !empty ( $GLOBALS[ 'TmacConfig' ][ 'Session' ][ 'expire' ] ) ) ini_set ( 'session.gc_maxlifetime', $GLOBALS[ 'TmacConfig' ][ 'Session' ][ 'expire' ] ); if ( $GLOBALS[ 'TmacConfig' ][ 'Session' ][ 'type' ] == 'DB' ) { ini_set ( 'session.save_handler', 'user' ); $hander = new SessionDb(); $hander->execute (); } else if ( $GLOBALS[ 'TmacConfig' ][ 'Session' ][ 'type' ] == 'memcache' ) { ini_set ( "session.save_handler", "memcache" ); ini_set ( "session.save_path", "tcp://{$GLOBALS[ 'TmacConfig' ][ 'Cache' ][ 'Memcached' ][ 'host' ]}:{$GLOBALS[ 'TmacConfig' ][ 'Cache' ][ 'Memcached' ][ 'port' ]}" ); } else if ( $GLOBALS[ 'TmacConfig' ][ 'Session' ][ 'type' ] == 'memcached' ) { ini_set ( "session.save_handler", "memcached" ); ini_set ( "session.save_path", "{$GLOBALS[ 'TmacConfig' ][ 'Cache' ][ 'Memcached' ][ 'host' ]}:{$GLOBALS[ 'TmacConfig' ][ 'Cache' ][ 'Memcached' ][ 'port' ]}" ); } session_start (); } public final static function getCache ( $variable, $callback, $params = array(), $expire = 60 ) { $cache = CacheDriver::getInstance (); $cache->setMd5Key ( false ); $value = $cache->get ( $variable ); if ( $value === false || $expire == 0 ) { $value = call_user_func_array ( $callback, $params ); $cache->set ( $variable, $value, $expire ); } return $value; } public final static function getMemcache ( $variable, $callback, $params = array(), $expire = 60 ) { $cache = CacheDriver::getInstance ( 'Memcached' ); $value = $cache->get ( $variable ); if ( $value === false || $expire == 0 ) { $value = call_user_func_array ( $callback, $params ); $cache->set ( $variable, $value, $expire ); } return $value; } public final function exception ( $e ) { $e->getError (); } }
 class TmacException extends Exception { private $html = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><title>系统发生错误</title><meta http-equiv="content-type" content="text/html;charset=utf-8"/><meta name="Generator" content="EditPlus"/><style>body{	font-family: \'Microsoft Yahei\', Verdana, arial, sans-serif;	font-size:14px;}a{text-decoration:none;color:#174B73;}a:hover{ text-decoration:none;color:#FF6600;}h2{	border-bottom:1px solid #DDD;	padding:8px 0;    font-size:25px;}.title{	margin:4px 0;	color:#F60;	font-weight:bold;}.message,#trace{	padding:1em;	border:solid 1px #000;	margin:10px 0;	background:#FFD;	line-height:150%%;}.message{	background:#FFD;	color:#2E2E2E;		border:1px solid #E0E0E0;}#trace{	background:#E7F7FF;	border:1px solid #E0E0E0;	color:#535353;}.notice{    padding:10px;	margin:5px;	color:#666;	background:#FCFCFC;	border:1px solid #E0E0E0;}.red{	color:red;	font-weight:bold;}</style></head><body><div class="notice"><h2>系统发生错误 </h2><div >您可以选择 [ <A HREF="%s">重试</A> ] [ <A HREF="javascript:history.back()">返回</A> ] 或者 [ <A HREF="%s">回到首页</A> ]</div><p class="title">[ 错误信息 ]</p><p class="message">%s</p><p class="title">[ TRACE ]</p><p id="trace"><b>%s</b><br />%s<br /></p></div><div align="center" style="color:#FF3300;margin:5pt;font-family:Verdana"> TmacMVC<span style=\'color:silver\'> { Tmac MVC PHP Framework }</span></div></body></html>
'; public function __construct($message = 'Unknown Error', $code = 0) { parent::__construct($message, $code); } public function getError() { $url = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']; if ($GLOBALS['TmacConfig']['Common']['debug']) { $trace = $this->getTrace(); $this->class = $trace[0]['class']; $this->function = $trace[0]['function']; $this->line = $trace[0]['line']; $traceInfo = ''; $time = date("y-m-d H:i:m"); foreach ($trace as $t) { $traceInfo .= '[' . $time . '] ' . $t['file'] . ' (' . $t['line'] . ') '; $traceInfo .= $t['class'] . $t['type'] . $t['function'] . '('; $traceInfo .= implode(', ', $t['args']); $traceInfo .=")<br/>"; } die(sprintf($this->html, $url, PHP_SELF, urldecode($this->getMessage()), '在[' . $this->getFile() . ']的第[' . $this->getLine() . ']行. ', $traceInfo)); } else { die(sprintf($this->html, $url, PHP_SELF, urldecode($this->getMessage()), '请联系管理员', '')); } } } 
 class Log { protected $path; protected $conversionPattern; protected $append; protected $level; protected $errorMessage; const FOPEN_WRITE_CREATE = 'ab'; const FOPEN_WRITE_CREATE_DESTRUCTIVE = 'wb'; function getErrorMessage() { return $this->errorMessage; } protected static $instance = array(); public static function getInstance( $name ) { if ( !isset( self::$instance[ $name ] ) ) { self::$instance[ $name ] = new Log( $name ); } return self::$instance[ $name ]; } public function __construct( $log_name ) { $logConfigArray = Tmac::config( 'log.log.' . $log_name, APP_BASE_NAME ); preg_match_all( "/(?:\[)(.*)(?:\])/i", $logConfigArray[ 'File' ], $out ); if ( !empty( $out[ 0 ][ 0 ] ) ) { $logConfigArray[ 'File' ] = str_replace( $out[ 0 ][ 0 ], date( $out[ 1 ][ 0 ] ), $logConfigArray[ 'File' ] ); } preg_match_all( "/(?:\[)(.*)(?:\])/i", $logConfigArray[ 'ConversionPattern' ], $out ); if ( !empty( $out[ 0 ][ 0 ] ) ) { $logConfigArray[ 'ConversionPattern' ] = str_replace( $out[ 0 ][ 0 ], date( $out[ 1 ][ 0 ] ), $logConfigArray[ 'ConversionPattern' ] ); } $this->path = $logConfigArray[ 'File' ]; $this->conversionPattern = $logConfigArray[ 'ConversionPattern' ]; $this->append = $logConfigArray[ 'Append' ]; $this->level = ''; $this->checkFolder( dirname( $logConfigArray[ 'File' ] ) ); } public function setLevel( $level ) { $this->level = $level; return $this; } public function write( $message ) { $head = ''; if ( $this->append ) { $file_mode = self::FOPEN_WRITE_CREATE; } else { $file_mode = self::FOPEN_WRITE_CREATE_DESTRUCTIVE; } if ( !$fp = fopen( $this->path, $file_mode ) ) { return FALSE; } $head .= '[' . $this->conversionPattern . '] ' . $this->level . ' --> '; flock( $fp, LOCK_EX ); fwrite( $fp, "\n" . $head ); fwrite( $fp, $message ); flock( $fp, LOCK_UN ); fclose( $fp ); chmod( $this->path, 0666 ); return TRUE; } private function checkFolder( $filedir ) { if ( !file_exists( $filedir ) ) { if ( !mkdir( $filedir, 0777, true ) ) { $this->errorMessage = '指定的路径权限不足 =>' . $filedir; return false; } } return true; } }
 abstract class Cache { public abstract function set($key, $value, $expire = 60); public abstract function get($key); public abstract function del($key); public abstract function delAll(); public abstract function has($key); }
 class CacheDriver { static protected $instance = array(); public static function getInstance( $name = null, $config = null ) { if ( empty( $name ) ) $name = $GLOBALS[ 'TmacConfig' ][ 'Cache' ][ 'class' ]; $class = 'Cache' . $name; if ( !isset( self::$instance[ $name ] ) ) { $filename = TMAC_PATH . 'Cache' . DIRECTORY_SEPARATOR . $class . '.class.php'; if ( is_file( $filename ) ) { require $filename; } else { throw new TmacException( "没有找到{$class}缓存驱动!" ); } self::$instance[ $name ] = new $class( $config ); } return self::$instance[ $name ]; } }
 abstract class Database { protected $link; protected $queryNum = 0; protected $numRows = 0; protected $cache; protected $is_cache = false; protected $success = true; protected $trans_status = false; protected $trans_level = 0; protected $identifier_left = '`'; protected $identifier_right = '`'; public abstract function connect (); public abstract function selectDatabase ( $database ); public abstract function query ( $sql ); public abstract function execute ( $sql ); protected abstract function fetch ( $rs ); protected abstract function fetch_object ( $rs ); public abstract function insert ( $sql ); protected abstract function free ( $rs ); public abstract function close (); public abstract function getError (); public function setDebug ( $open = false ) { $GLOBALS[ 'TmacConfig' ][ 'Common' ][ 'debug' ] = $open; } public function getQueryNum () { return $this->queryNum; } public function getNumRows () { return $this->numRows; } protected final function getCache () { $this->cache = CacheDriver::getInstance (); $this->is_cache = true; } public function getOne ( $sql ) { if ( !$rs = $this->query ( $sql ) ) { return false; } $row = $this->fetch ( $rs ); $this->free ( $rs ); return is_array ( $row ) ? array_shift ( $row ) : $row; } public function cacheGetOne ( $sql, $expire = 60 ) { $this->is_cache OR $this->getCache (); $value = $this->cache->get ( $sql ); if ( $value === false ) { $value = $this->getOne ( $sql ); $this->cache->set ( $sql, $value, $expire ); } return $value; } public function getRow ( $sql ) { if ( !$rs = $this->query ( $sql ) ) { return false; } $row = $this->fetch ( $rs ); $this->free ( $rs ); return $row; } public function cacheGetRow ( $sql, $expire = 60 ) { $this->is_cache OR $this->getCache (); $value = $this->cache->get ( $sql ); if ( $value === false ) { $value = $this->getRow ( $sql ); $this->cache->set ( $sql, $value, $expire ); } return $value; } public function getRowObject ( $sql ) { if ( !$rs = $this->query ( $sql ) ) { return false; } $row = $this->fetch_object ( $rs ); $this->free ( $rs ); return $row; } public function getAll ( $sql ) { if ( !$rs = $this->query ( $sql ) ) { return false; } $all_rows = array(); while ( $rows = $this->fetch ( $rs ) ) { $all_rows[] = $rows; } $this->free ( $rs ); return $all_rows; } public function cacheGetAll ( $sql, $expire = 60 ) { $this->is_cache OR $this->getCache (); $value = $this->cache->get ( $sql ); if ( $value === false ) { $value = $this->getAll ( $sql ); $this->cache->set ( $sql, $value, $expire ); } return $value; } public function getAllObject ( $sql ) { if ( !$rs = $this->query ( $sql ) ) { return false; } $all_rows = array(); while ( $rows = $this->fetch_object ( $rs ) ) { $all_rows[] = $rows; } $this->free ( $rs ); return $all_rows; } protected function getCol ( $sql ) { $res = $this->query ( $sql ); if ( $res !== false ) { $arr = array(); while ( $row = $this->fetch_row ( $res ) ) { $arr[] = $row[ 0 ]; } return $arr; } else { return false; } } protected function cachegetCol ( $sql, $expire = 60 ) { $this->is_cache OR $this->getCache (); $value = $this->cache->get ( $sql ); if ( $value === false ) { $value = $this->getCol ( $sql ); $this->cache->set ( $sql, $value, $expire ); } return $value; } public function autoExecute ( $table, $field_values, $mode = 'INSERT', $where = '' ) { $field_names = $this->getCol ( 'DESC ' . $table ); $sql = ''; if ( $mode == 'INSERT' ) { $fields = $values = array(); foreach ( $field_names AS $value ) { if ( array_key_exists ( $value, $field_values ) == false ) { continue; } $fields[] = '`' . $value . '`'; if ( $field_values[ $value ] instanceof TmacDbExpr ) { $values[] = $field_values[ $value ]; } else { $values[] = $this->escape ( $field_values[ $value ] ); } } $sql = $this->getInsertSql ( $table, $fields, $values ); } else { $sets = array(); foreach ( $field_names AS $value ) { if ( array_key_exists ( $value, $field_values ) == false ) { continue; } if ( $field_values[ $value ] instanceof TmacDbExpr ) { $sets[] = '`' . $value . '` = ' . $field_values[ $value ]; } else { $sets[] = '`' . $value . '` = ' . $this->escape ( $field_values[ $value ] ); } } $sql = $this->getUpdateSql ( $table, $sets, $where ); } if ( $sql ) { return $this->query ( $sql ); } else { return false; } } public function autoInsertReturn ( $table, $field_values ) { $field_names = $this->getCol ( 'DESC ' . $table ); $sql = ''; $fields = $values = array(); foreach ( $field_names AS $value ) { if ( array_key_exists ( $value, $field_values ) == true ) { $fields[] = '`' . $value . '`'; if ( $field_values[ $value ] instanceof TmacDbExpr ) { $values[] = $field_values[ $value ]; } else { $values[] = $this->escape ( $field_values[ $value ] ); } } } $sql = $this->getInsertSql ( $table, $fields, $values ); if ( $sql ) { return $this->insert ( $sql ); } else { return false; } } public function insertObject ( $table, $object ) { $entity_table_name = get_class ( $object ); $entity_table_class = new $entity_table_name(); $fields = $values = array(); foreach ( $object as $key => $value ) { if ( isset ( $value ) === false ) { continue; } if ( property_exists ( $entity_table_class, $key ) === false ) { continue; } $fields[] = $this->identifier_left . $key . $this->identifier_right; if ( $value instanceof TmacDbExpr ) { $values[] = $value; } else { $values[] = $this->escape ( $value ); } } $sql = $this->getInsertSql ( $table, $fields, $values ); if ( $sql ) { return $this->insert ( $sql ); } else { return false; } } public function updateObject ( $table, $object, $where, $primaryKeyField = '' ) { $entity_table_name = get_class ( $object ); $entity_table_class = new $entity_table_name(); $sets = array(); foreach ( $object as $key => $value ) { if ( isset ( $value ) === false ) { continue; } if ( property_exists ( $entity_table_class, $key ) === false ) { continue; } if ( !empty ( $primaryKeyField ) && $key === $primaryKeyField ) { continue; } if ( $value instanceof TmacDbExpr ) { $sets[] = $this->identifier_left . $key . $this->identifier_right . ' = ' . $value; } else { $sets[] = $this->identifier_left . $key . $this->identifier_right . ' = ' . $this->escape ( $value ); } } $sql = $this->getUpdateSql ( $table, $sets, $where ); if ( $sql ) { return $this->execute ( $sql ); } else { return false; } } public function isSuccess () { return $this->success; } protected function getInsertSql ( $table, $fields, $values ) { $sql = false; if ( !empty ( $fields ) ) { $sql = 'INSERT INTO ' . $table . ' (' . implode ( ', ', $fields ) . ') VALUES (' . implode ( ', ', $values ) . ')'; } return $sql; } protected function getUpdateSql ( $table, $sets, $where ) { $sql = false; if ( !empty ( $sets ) ) { $sql = 'UPDATE ' . $table . ' SET ' . implode ( ', ', $sets ) . ' WHERE ' . $where; } return $sql; } protected function escape ( $str ) { if ( is_string ( $str ) ) { $str = "'" . $str . "'"; } elseif ( is_bool ( $str ) ) { $str = ($str === FALSE) ? 0 : 1; } elseif ( is_null ( $str ) ) { $str = 'NULL'; } return $str; } public function debug ( $sql, $success = true, $error = null ) { global $TmacConfig; if ( $TmacConfig[ 'Common' ][ 'debug' ] ) { $debug = Debug::getInstance (); $debug->setSQL ( $sql, $success, $error ); } } }
 class DatabaseDriver { protected static $instance = array(); public static function getInstance($name) { $class = 'Db' . $GLOBALS['db'][$name]['dbdriver']; if (!isset(self::$instance[$name])) { if (class_exists($class, false) === false) { $filename = TMAC_PATH . 'Database' . DIRECTORY_SEPARATOR . $class . '.class.php'; if (is_file($filename)) { require $filename; } else { throw new TmacException("没有找到{$class}数据库驱动!"); } } $config = $GLOBALS['db'][$name]; self::$instance[$name] = new $class($config); } return self::$instance[$name]; } }